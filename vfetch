#!/bin/bash

# Colors (using tput for reliability)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
PURPLE=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
BOLD=$(tput bold)
NC=$(tput sgr0)

# Fixed padding values
ASCII_WIDTH=50      # Width of ASCII art
LABEL_WIDTH=10      # Width for labels

# Store ASCII art
read -r -d '' ASCII_ART << "EOF"
██╗   ██╗███████╗███████╗████████╗ ██████╗██╗  ██╗
██║   ██║██╔════╝██╔════╝╚══██╔══╝██╔════╝██║  ██║
██║   ██║█████╗  █████╗     ██║   ██║     ███████║
╚██╗ ██╔╝██╔══╝  ██╔══╝     ██║   ██║     ██╔══██║
 ╚████╔╝ ██║     ███████╗   ██║   ╚██████╗██║  ██║
  ╚═══╝  ╚═╝     ╚══════╝   ╚═╝    ╚═════╝╚═╝  ╚═╝
EOF

# Convert ASCII art to array
mapfile -t ascii_art <<< "$ASCII_ART"

# Get system information
os=$(sed -n 's/PRETTY_NAME="\(.*\)"/\1/p' /etc/os-release)
host=$(hostname)
kernel=$(uname -r)
uptime=$(uptime -p | sed 's/up //')
packages="$(rpm -qa | wc -l) (rpm), $(flatpak list 2>/dev/null | wc -l) (flatpak)"
shell=$(basename "$SHELL")
de="$XDG_CURRENT_DESKTOP"

# CPU info
IFS=':' read -r _ cpu_model < <(grep "model name" /proc/cpuinfo | head -1)
cpu_cores=$(grep -c ^processor /proc/cpuinfo)
cpu="${cpu_model# } ($cpu_cores)"

# Memory info
while read -r line; do
    case $line in
        *MemTotal:*) total=$((${line##* }/1024));;
        *MemAvailable:*) avail=$((${line##* }/1024));;
    esac
done < /proc/meminfo
used=$((total-avail))
memory="${used}MB / ${total}MB"

# GPU and other info
gpu=$(lspci | grep -i 'vga\|3d\|display' | sed 's/.*: //')
read -r _ used total used_percent _ <<< "$(df -h / | awk 'NR==2{print $3,$2,$5}')"
disk="$used/$total ($used_percent)"

# Battery info
if [ -d "/sys/class/power_supply/BAT0" ]; then
    bat_status=$(< /sys/class/power_supply/BAT0/status)
    bat_percent=$(< /sys/class/power_supply/BAT0/capacity)
    battery="$bat_percent% ($bat_status)"
else
    battery="N/A"
fi

local_ip=$(hostname -I | cut -d' ' -f1)
locale="$LANG"

# Create arrays for labels and values
declare -a labels=(
    "OS" "Host" "Kernel" "Uptime" "Packages" "Shell" "DE" "CPU"
    "Memory" "GPU" "Disk" "Battery" "Local IP" "Locale"
)

declare -a values=(
    "$os" "$host" "$kernel" "$uptime" "$packages" "$shell" "$de" "$cpu"
    "$memory" "$gpu" "$disk" "$battery" "$local_ip" "$locale"
)

# Colors for each value
declare -a colors=(
    "$GREEN" "$CYAN" "$PURPLE" "$YELLOW" "$PURPLE" "$CYAN" "$BLUE" "$GREEN"
    "$BLUE" "$PURPLE" "$RED" "$YELLOW" "$CYAN" "$CYAN"
)

# Print top padding
echo

# Determine maximum lines to print
max_lines=$(( ${#ascii_art[@]} > ${#labels[@]} ? ${#ascii_art[@]} : ${#labels[@]} ))

# Print each line
for ((i = 0; i < max_lines; i++)); do
    # Print ASCII art or padding
    if ((i < ${#ascii_art[@]})); then
        printf "${RED}%-${ASCII_WIDTH}s${NC}" "${ascii_art[i]}"
    else
        printf "%-${ASCII_WIDTH}s" ""
    fi
    
    # Print info line if available
    if ((i < ${#labels[@]})); then
        printf "${RED}%-12s${NC}: ${colors[i]}%s${NC}" "${labels[i]}" "${values[i]}"
    fi
    
    echo
done

# Print bottom padding
echo