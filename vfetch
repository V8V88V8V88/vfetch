#!/bin/bash

# Colors (using tput for reliability)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
PURPLE=$(tput setaf 5)
CYAN=$(tput setaf 6)
NC=$(tput sgr0)

# Function to print info with proper padding and formatting
print_info() {
    printf "%s%s%s%s%s%s\n" "$RED" "$1" "${NC}" "${2:+:  }" "${2:-}" "${NC}"
}

# Define the ASCII art as a here document (ensuring it's in gray/white)
readarray -t ascii_art << "EOF"
██╗   ██╗███████╗███████╗████████╗ ██████╗██╗  ██╗
██║   ██║██╔════╝██╔════╝╚══██╔══╝██╔════╝██║  ██║
██║   ██║█████╗  █████╗     ██║   ██║     ███████║
╚██╗ ██╔╝██╔══╝  ██╔══╝     ██║   ██║     ██╔══██║
 ╚████╔╝ ██║     ███████╗   ██║   ╚██████╗██║  ██║
  ╚═══╝  ╚═╝     ╚══════╝   ╚═╝    ╚═════╝╚═╝  ╚═╝
EOF

# Get system information with improved formatting
os=$(sed -n 's/PRETTY_NAME="\(.*\)"/\1/p' /etc/os-release)
host=$(hostname)
kernel=$(uname -r)
uptime=$(uptime -p | sed 's/up //')
packages="$(rpm -qa | wc -l) (rpm), $(flatpak list 2>/dev/null | wc -l) (flatpak)"
shell=$(basename "$SHELL")
de="$XDG_CURRENT_DESKTOP"

# CPU info with better formatting
IFS=':' read -r _ cpu_model < <(grep "model name" /proc/cpuinfo | head -1)
cpu_cores=$(grep -c ^processor /proc/cpuinfo)
cpu="${cpu_model# } ($cpu_cores)"

# Memory info
while read -r line; do
    case $line in
        *MemTotal:*) total=$((${line##* }/1024));;
        *MemAvailable:*) avail=$((${line##* }/1024));;
    esac
done < /proc/meminfo
used=$((total-avail))
memory="${used}MB / ${total}MB"

# GPU info with cleaner output
gpu=$(lspci | grep -i 'vga\|3d\|display' | sed 's/.*: //')

# Disk info
read -r _ used total used_percent _ <<< "$(df -h / | awk 'NR==2{print $3,$2,$5}')"
disk="$used/$total ($used_percent)"

# Battery info with improved formatting
if [ -d "/sys/class/power_supply/BAT0" ]; then
    bat_status=$(< /sys/class/power_supply/BAT0/status)
    bat_percent=$(< /sys/class/power_supply/BAT0/capacity)
    battery="$bat_percent% ($bat_status)"
fi

# Local IP and Locale
local_ip=$(hostname -I | cut -d' ' -f1)
locale="$LANG"

# Create formatted info array
readarray -t sys_info << EOF
$(print_info "OS" "${GREEN}${os}")
$(print_info "Host" "${CYAN}${host}")
$(print_info "Kernel" "${PURPLE}${kernel}")
$(print_info "Uptime" "${YELLOW}${uptime}")
$(print_info "Packages" "${PURPLE}${packages}")
$(print_info "Shell" "${CYAN}${shell}")
$(print_info "DE" "${BLUE}${de}")
$(print_info "CPU" "${GREEN}${cpu}")
$(print_info "Memory" "${BLUE}${memory}")
$(print_info "GPU" "${PURPLE}${gpu}")
$(print_info "Disk" "${RED}${disk}")
$(print_info "Battery" "${RED}${battery}")
$(print_info "Local IP" "${CYAN}${local_ip}")
$(print_info "Locale" "${CYAN}${locale}")
EOF

# Print ASCII art and system info side by side with improved padding
max_length=${#ascii_art[@]}
[[ ${#sys_info[@]} -gt $max_length ]] && max_length=${#sys_info[@]}

# Add some padding at the top
echo

# Print each line with proper padding
for ((i=0; i<max_length; i++)); do
    # Print the ASCII art in red with proper padding for info
    if [ -n "${ascii_art[$i]:-}" ]; then
        printf "${RED}%-80s${NC}%s\n" "${ascii_art[$i]}" "${sys_info[$i]:-}"
    else
        printf "%-80s%s\n" "" "${sys_info[$i]:-}"
    fi
done

# Add some padding at the bottom
echo