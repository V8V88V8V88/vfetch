#!/bin/bash

# Colors (using tput for reliability)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
PURPLE=$(tput setaf 5)
CYAN=$(tput setaf 6)
NC=$(tput sgr0)

# Get terminal width
TERM_WIDTH=$(tput cols)

# Calculate padding dynamically
ASCII_WIDTH=50  # Width of the ASCII art
INFO_OFFSET=25  # Additional padding between ASCII and info
TOTAL_PAD=$((ASCII_WIDTH + INFO_OFFSET))

# Function to print info with proper padding and formatting
print_info() {
    printf "%s%-15s%s%s%s%s\n" "$RED" "$1" "${NC}" "${2:+:  }" "${2:-}" "${NC}"
}

# Store the ASCII art (now simpler, will be colored during printing)
readarray -t ascii_art << "EOF"
██╗   ██╗███████╗███████╗████████╗ ██████╗██╗  ██╗
██║   ██║██╔════╝██╔════╝╚══██╔══╝██╔════╝██║  ██║
██║   ██║█████╗  █████╗     ██║   ██║     ███████║
╚██╗ ██╔╝██╔══╝  ██╔══╝     ██║   ██║     ██╔══██║
 ╚████╔╝ ██║     ███████╗   ██║   ╚██████╗██║  ██║
  ╚═══╝  ╚═╝     ╚══════╝   ╚═╝    ╚═════╝╚═╝  ╚═╝
EOF

# Get system information
os=$(sed -n 's/PRETTY_NAME="\(.*\)"/\1/p' /etc/os-release)
host=$(hostname)
kernel=$(uname -r)
uptime=$(uptime -p | sed 's/up //')
packages="$(rpm -qa | wc -l) (rpm), $(flatpak list 2>/dev/null | wc -l) (flatpak)"
shell=$(basename "$SHELL")
de="$XDG_CURRENT_DESKTOP"

# CPU info
IFS=':' read -r _ cpu_model < <(grep "model name" /proc/cpuinfo | head -1)
cpu_cores=$(grep -c ^processor /proc/cpuinfo)
cpu="${cpu_model# } ($cpu_cores)"

# Memory info
while read -r line; do
    case $line in
        *MemTotal:*) total=$((${line##* }/1024));;
        *MemAvailable:*) avail=$((${line##* }/1024));;
    esac
done < /proc/meminfo
used=$((total-avail))
memory="${used}MB / ${total}MB"

# GPU info
gpu=$(lspci | grep -i 'vga\|3d\|display' | sed 's/.*: //')

# Disk info
read -r _ used total used_percent _ <<< "$(df -h / | awk 'NR==2{print $3,$2,$5}')"
disk="$used/$total ($used_percent)"

# Battery info
if [ -d "/sys/class/power_supply/BAT0" ]; then
    bat_status=$(< /sys/class/power_supply/BAT0/status)
    bat_percent=$(< /sys/class/power_supply/BAT0/capacity)
    battery="$bat_percent% ($bat_status)"
fi

# Local IP and Locale
local_ip=$(hostname -I | cut -d' ' -f1)
locale="$LANG"

# Function to create colored info string
color_info() {
    local label=$1
    local value=$2
    local color=$3
    echo "${RED}${label}${NC}:  ${color}${value}${NC}"
}

# Create info array with proper colors
readarray -t info_array << EOF
$(color_info "OS" "$os" "$GREEN")
$(color_info "Host" "$host" "$CYAN")
$(color_info "Kernel" "$kernel" "$PURPLE")
$(color_info "Uptime" "$uptime" "$YELLOW")
$(color_info "Packages" "$packages" "$PURPLE")
$(color_info "Shell" "$shell" "$CYAN")
$(color_info "DE" "$de" "$BLUE")
$(color_info "CPU" "$cpu" "$GREEN")
$(color_info "Memory" "$memory" "$BLUE")
$(color_info "GPU" "$gpu" "$PURPLE")
$(color_info "Disk" "$disk" "$RED")
$(color_info "Battery" "$battery" "$RED")
$(color_info "Local IP" "$local_ip" "$CYAN")
$(color_info "Locale" "$locale" "$CYAN")
EOF

# Add some padding at the top
echo

# Print ASCII art and info with dynamic padding
max_lines=$((${#ascii_art[@]} > ${#info_array[@]} ? ${#ascii_art[@]} : ${#info_array[@]}))

for ((i = 0; i < max_lines; i++)); do
    if [ $i -lt ${#ascii_art[@]} ]; then
        # Print ASCII art in red with calculated padding
        printf "${RED}%-${TOTAL_PAD}s${NC}" "${ascii_art[$i]}"
    else
        # Print empty padding if we're past ASCII art
        printf "%-${TOTAL_PAD}s" ""
    fi
    
    # Print info if available
    if [ $i -lt ${#info_array[@]} ]; then
        printf "%s\n" "${info_array[$i]}"
    else
        printf "\n"
    fi
done

# Add some padding at the bottom
echo