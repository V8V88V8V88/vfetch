#!/bin/bash

# Colors (using tput for reliability)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
PURPLE=$(tput setaf 5)
CYAN=$(tput setaf 6)
NC=$(tput sgr0)

# Fixed padding values
ASCII_WIDTH=45      # Width of ASCII art
PAD_BETWEEN=20     # Padding between ASCII and info
LABEL_WIDTH=15     # Width for labels

# Function to create uniform info line
format_info() {
    local label="$1"
    local value="$2"
    local color="$3"
    printf "${RED}%-${LABEL_WIDTH}s${NC}%s ${color}%s${NC}" "$label" ":" "$value"
}

# Store ASCII art
read -r -d '' ASCII_ART << "EOF"
██╗   ██╗███████╗███████╗████████╗ ██████╗██╗  ██╗
██║   ██║██╔════╝██╔════╝╚══██╔══╝██╔════╝██║  ██║
██║   ██║█████╗  █████╗     ██║   ██║     ███████║
╚██╗ ██╔╝██╔══╝  ██╔══╝     ██║   ██║     ██╔══██║
 ╚████╔╝ ██║     ███████╗   ██║   ╚██████╗██║  ██║
  ╚═══╝  ╚═╝     ╚══════╝   ╚═╝    ╚═════╝╚═╝  ╚═╝
EOF

# Convert ASCII art to array
mapfile -t ascii_art <<< "$ASCII_ART"

# Get system information
os=$(sed -n 's/PRETTY_NAME="\(.*\)"/\1/p' /etc/os-release)
host=$(hostname)
kernel=$(uname -r)
uptime=$(uptime -p | sed 's/up //')
packages="$(rpm -qa | wc -l) (rpm), $(flatpak list 2>/dev/null | wc -l) (flatpak)"
shell=$(basename "$SHELL")
de="$XDG_CURRENT_DESKTOP"

# CPU info
IFS=':' read -r _ cpu_model < <(grep "model name" /proc/cpuinfo | head -1)
cpu_cores=$(grep -c ^processor /proc/cpuinfo)
cpu="${cpu_model# } ($cpu_cores)"

# Memory info
while read -r line; do
    case $line in
        *MemTotal:*) total=$((${line##* }/1024));;
        *MemAvailable:*) avail=$((${line##* }/1024));;
    esac
done < /proc/meminfo
used=$((total-avail))
memory="${used}MB / ${total}MB"

# GPU and other info
gpu=$(lspci | grep -i 'vga\|3d\|display' | sed 's/.*: //')
read -r _ used total used_percent _ <<< "$(df -h / | awk 'NR==2{print $3,$2,$5}')"
disk="$used/$total ($used_percent)"

# Battery info
if [ -d "/sys/class/power_supply/BAT0" ]; then
    bat_status=$(< /sys/class/power_supply/BAT0/status)
    bat_percent=$(< /sys/class/power_supply/BAT0/capacity)
    battery="$bat_percent% ($bat_status)"
fi

local_ip=$(hostname -I | cut -d' ' -f1)
locale="$LANG"

# Create info array with consistent formatting
declare -a info_lines=(
    "$(format_info "OS" "$os" "$GREEN")"
    "$(format_info "Host" "$host" "$CYAN")"
    "$(format_info "Kernel" "$kernel" "$PURPLE")"
    "$(format_info "Uptime" "$uptime" "$YELLOW")"
    "$(format_info "Packages" "$packages" "$PURPLE")"
    "$(format_info "Shell" "$shell" "$CYAN")"
    "$(format_info "DE" "$de" "$BLUE")"
    "$(format_info "CPU" "$cpu" "$GREEN")"
    "$(format_info "Memory" "$memory" "$BLUE")"
    "$(format_info "GPU" "$gpu" "$PURPLE")"
    "$(format_info "Disk" "$disk" "$RED")"
    "$(format_info "Battery" "$battery" "$RED")"
    "$(format_info "Local IP" "$local_ip" "$CYAN")"
    "$(format_info "Locale" "$locale" "$CYAN")"
)

# Print output
echo # Top padding

# Get maximum lines
max_lines=$(( ${#ascii_art[@]} > ${#info_lines[@]} ? ${#ascii_art[@]} : ${#info_lines[@]} ))

# Create padding string for between ASCII and info
pad_string=$(printf "%${PAD_BETWEEN}s" "")

# Print each line
for ((i = 0; i < max_lines; i++)); do
    # Print ASCII art line (or padding if beyond ASCII art)
    if ((i < ${#ascii_art[@]})); then
        printf "${RED}%s${NC}" "${ascii_art[i]}"
    else
        printf "%${ASCII_WIDTH}s" ""
    fi

    # Print padding between ASCII and info
    printf "%s" "$pad_string"

    # Print info line if available
    if ((i < ${#info_lines[@]})); then
        printf "%s" "${info_lines[i]}"
    fi

    printf "\n"
done

echo # Bottom padding